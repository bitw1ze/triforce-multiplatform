Gabe Pike
CMPS 335
Project Outline
22 April 2012

We will be remaking the classic SNES game Tetris Attack. We are calling it
Triforce, partially do to the nature of the game mechanic where it takes at
least three adjacent blocks in parallel to make a combo. In the game, a player
controls a cursor that lets him swap two adjacent blocks horizontally.
Combinations of 3 or more blocks in a row will break the blocks. The game mechanics allow the player to
use their skills and reaction time to gain great rewards. The game mechanics
are flexible and allow for several fun modes of play. 

The user experience should begin with opening the game to the main menu. The
menu can be navigated with the keyboard or the mouse. The menu will contain
buttons for Play, Settings, Help, Credits/About, and Quit. 

The Settings button will open a new menu to configure settings such as themes,
sounds, and difficulty. Help will tell the user how to play. When the user
selects Play, they will be taken to another menu to select what mode they want
to play. When they select the mode, they will be taken to the actual game. It
will start after a timer of three seconds. The gameplay area will consist of a
grid of blocks and a cursor for the player to control that is two blocks wide
and one block tall. The player uses the keyboard to move the cursor to an
adjacent block horizontally or vertically. The player must break blocks by
aligning three or more of the same color vertically or horizontally. A player
can play against another player or try to survive as long as he can. 

The project will be managed using Git as our version control system and using 
Github as our host. Github was chosen because of its many rich features for
developers, such its bug/enhancement ticket system, commit tracking tools,
wiki, and online code viewing. 

We want to keep true to the way the original game plays, but we want to update 
the classic with modern graphics, sound, and perhaps some new gameplay
mechanics. We plan to leave out artificial intelligence because of time 
constraints, but the game will be designed so it could be easily added in the
future. At a minimum, we will implement player versus player and "endurance
mode", where a player plays for as long as he can while the difficult of the
game gradually increases.

The game will require a backend infrastructure, a frontend interface, and
graphic/sound resources. The backend infrastructure will contain critical
libraries and utilities used by the frontend. There must be libraries for at
least the following functionality: extension of the graphics library provided
to us, gameplay mechanics, audio, file system, and settings. One example of the
backend infrastructure is the GObject class, which inherits from the CObject
class in Dr. Wani's 2D Graphics library. It adds some more methods to his
class.

The frontend will consist of all the game objects that the player interacts
with. The entry point of the modules is at the Triforce class, which controls
the state of the game. Depending on the state of the game, Triforce will hand
control to certain modules. In the "play" state, the GamePlay class has
control. GamePlay owns a Grid object. A Grid object represents the play area of
a single player. In 2-player mode, the GamePlay module will own two Grids. Each
Grid object owns one Cursor object, which is the object that the player
controls with the keyboard. The Grid also controls an array of Block objects. A
Block object represents a single block, and it is a child class of the GObject.

                Triforce
               /        \
              /          \
      GamePlay           Menu
       /    \           /      \
      /      \       MenuItem1  ...
    Grid1   Grid2
    /    \     ...
 Cursor1  Blocks

Each of these classes will contain the methods necessary to abstract what is
actually going on inside the class. 
